---
- name: Preparing Workstation
  hosts: localhost
  connection: local
  tasks:

    - name: Installing Linux Apps
      become: true
      apt:
        name: '{{ item }}'
        install_recommends: yes
        state: present
      loop:
          - vim
          - htop
          - curl
          - wget
          - ncdu
          - tree
          - apt-transport-https
          - ca-certificates
          - gnupg
          - python3-pip
          - make
          - git
          - bash-completion
          - gnupg-agent
          - zsh
          - flameshot
          - fonts-hack
          - tilix
          - virtualbox
          - plocate
          - krita
          - jq
          - mtr
          - unzip

    - block:
      - name: Verify if Oh-My-Zsh is installed
        stat:
          path: /home/{{ ansible_user_id }}/.oh-my-zsh
        register: ohmyzsh

      - name: Install Oh-My-Zsh if not installed
        shell: |
          sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" --unattended
        args:
          chdir: /home/{{ ansible_user_id }}
        become: true
        become_user: "{{ ansible_user_id }}"
        when: not ohmyzsh.stat.exists

      - name: Debug message if Oh-My-Zsh is already installed
        debug:
          msg: "Oh-My-Zsh is already installed."
        when: ohmyzsh.stat.exists

      - name: Changing Default Shell to ZSH
        become: true
        become_user: '{{ ansible_user_id }}'
        shell: /bin/zsh

      - name: Changing Default ZSH Theme to Agnoster
        lineinfile:
          path: /home/{{ ansible_user_id }}/.zshrc
          regexp: '^ZSH_THEME='
          line: 'ZSH_THEME="agnoster"'
      
      - name: Creating ZSH Completion folder
        file:
          path: /home/{{ ansible_user_id }}/.oh-my-zsh/completions
          state: directory
          mode: 0755
      - name: Adding autoload to compinit
        lineinfile:
          path: /home/{{ ansible_user_id }}/.zshrc
          line: 'autoload -U compinit && compinit'
          state: present

      - name: Check if AWS CLI is installed
        command: aws --version
        register: aws_cli
        ignore_errors: true

      - name: Install AWS CLI 
        shell: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86\_64.zip" -o "awscliv2.zip" 
          unzip awscliv2.zip
          sudo ./aws/install
          rm -rf aws awscli2.zip
        args:
          chdir: /tmp
        when: aws_cli.failed

      - name: Debug message if AWS CLI is already installed
        debug:
          msg: "AWS CLI is already installed."
        when: not aws_cli.failed

    - block:
      - name: Install Google Key
        become: true
        apt_key: 
          url: 'https://dl.google.com/linux/linux_signing_key.pub'
          state: present
      - name: Install Google Repository
        become: true
        apt_repository:
          repo: 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'
          state: present
          filename: google-chrome
      - name: Install Google Chrome
        become: true
        apt:
          name: google-chrome-stable

    - block:
      - name: Installing Vagrant 2.4.3
        become: true
        unarchive:
          src: 'https://releases.hashicorp.com/vagrant/2.4.3/vagrant_2.4.3_linux_amd64.zip'
          dest: /usr/local/bin
          remote_src: yes

    - block:
      - name: Installing Terraform 1.10.5
        become: true
        unarchive:
          src: 'https://releases.hashicorp.com/terraform/1.10.5/terraform_1.10.5_linux_amd64.zip'
          dest: /usr/local/bin
          remote_src: yes

      - name: Installing Vault 1.8.1
        become: true
        unarchive:
          src: 'https://releases.hashicorp.com/vault/1.18.3/vault_1.18.3_linux_amd64.zip'
          dest: /usr/local/bin
          remote_src: yes

    - block:
      - name: Installing gomplate 4.3.0
        become: true
        get_url:    
          url: 'https://github.com/hairyhenderson/gomplate/releases/download/v4.3.0/gomplate_linux-amd64'
          dest: /usr/local/bin/gomplate
          mode: 755

    - block:
      - name: Installing Stern 1.32.0
        become: true
        get_url:    
          url: 'https://github.com/stern/stern/releases/download/v1.32.0/stern_1.32.0_linux_amd64.tar.gz'
          dest: /tmp/stern_1.32.0_linux_amd64.tar.gz
          mode: 0755
      - name: Extract the tar.gz file
        unarchive:
          src: /tmp/stern_1.32.0_linux_amd64.tar.gz
          dest: /tmp
          remote_src: yes
      - name: Move the stern binary to /usr/local/bin
        become: true
        copy:
          src: /tmp/stern
          dest: /usr/local/bin
          mode: 0755
      - name: Clean up temporary files
        become: true
        file:
          path: /tmp/stern_1.32.0_linux_amd64.tar.gz
          state: absent

    - block:
      - name: Install Microsoft Key
        become: true
        apt_key:
          url: 'https://packages.microsoft.com/keys/microsoft.asc'
          state: present
      - name: Install VSCode Repository
        become: true
        apt_repository:
          repo: 'deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main'
          state: present
          filename: vscode
      - name: Install Visual Studio Code
        become: true
        apt:
          name: code
      - name: Install Virtual Studio Code Extensions
        shell:
          cmd: code --install-extension '{{ item }}' 
        loop: 
          - ms-python.python
          - ms-azuretools.vscode-docker
          - bbenoist.vagrant
          - hashicorp.terraform
          - gruntfuggly.todo-tree
          - njpwerner.autodocstring
          - eamodio.gitlens

    - block: 
      - name: Install Docker Key
        become: true
        apt_key:
          url: 'https://download.docker.com/linux/ubuntu/gpg'
          state: present
      - name: Install Docker Repository
        become: true
        apt_repository:
          repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable'
          state: present
          filename: docker-ce
      - name: Install Docker
        become: true
        apt:
          name: docker-ce
      - name: Adding existing user to group Docker
        become: yes
        user: 
          name: '{{ ansible_user_id }}'
          groups: docker 
          append: yes
      - name: Install Docker-Compose
        become: true
        get_url:
          url: 'https://github.com/docker/compose/releases/download/1.26.2/docker-compose-Linux-x86_64'
          dest: '/usr/local/bin/docker-compose'
          mode: 755
      - name: Install Docker Machine Bash Completion
        become: true
        get_url:
          url: 'https://raw.githubusercontent.com/docker/machine/v0.16.0/contrib/completion/bash/docker-machine.bash'
          dest: '/etc/bash_completion.d/docker-machine'
      - name: Install Docker-Compose Bash Completion
        become: true
        get_url:
          url: 'https://raw.githubusercontent.com/docker/compose/1.26.2/contrib/completion/bash/docker-compose'
          dest: '/etc/bash_completion.d/docker-compose'
      - name: Install Docker-Compose and Docker Machine Zsh Completion
        lineinfile:
          path: /home/{{ ansible_user_id }}/.zshrc
          regexp: '^plugins='
          line: 'plugins=(git docker docker-compose)'
        
    - block:
      - name: Installing Kubectl 1.32.0
        become: true
        get_url:    
          url: 'https://dl.k8s.io/release/v1.32.0/bin/linux/amd64/kubectl'
          dest: /usr/local/bin/kubectl
          mode: 755
      - name: Downloading Kubectx and Kubens 
        become: true
        git:
          repo: 'https://github.com/ahmetb/kubectx'
          dest: /opt/kubectx 
      - name: Creating Symlink to kubectx and kubens 
        become: true
        file:
          src: '/opt/kubectx/{{ item }}'
          dest: '/usr/local/bin/{{ item }}'
          state: link
        with_items:
          - kubectx
          - kubens  
      - name: Creating ZSH Completion  
        file:
          src: '/opt/kubectx/completion/{{ item }}'
          dest: '/home/{{ ansible_user_id }}/.oh-my-zsh/completions/_{{ item }}'
          state: link
        with_items:
          - kubectx.zsh
          - kubens.zsh 
          
    - block:
      - name: Adding Longsleep/Golang Backports Repository
        become: true
        apt_repository:
          repo: 'ppa:longsleep/golang-backports'
      - name: Install Golang 
        become: true
        apt:
          name: golang-go
          
# OPTIONAL:
#  - PEEK - Lightweight Screen Recorder that can export as GIF
#  - OBS-STUDIO - Screen Recorder and Casting Software 
#  - Brave Browser - Secure web browser
#  - Ulauncher - Application Launcher

    - block:
      - name: Adding Peek Repository
        become: true
        apt_repository:
          repo: 'ppa:peek-developers/stable'
      - name: Install Peek
        become: true
        apt:
          name: peek

    - block: 
      - name: Install Brave Key
        become: true
        apt_key:
          url: 'https://brave-browser-apt-release.s3.brave.com/brave-core.asc'
          state: present
      - name: Install Brave Repository
        become: true
        apt_repository:
          repo: 'deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main'
          state: present
          filename: brave
      - name: Install Brave Browser
        become: true
        apt:
          name: brave-browser
